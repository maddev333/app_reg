# This is a basic workflow to help you get started with Actions

name: Update

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      name:
        description: Application to update
        required: true
     # keyvault:
     #   type: boolean
     #   description: Update KeyVault
      append:
        type: boolean
        description: Append secret instead of overwrite
      keyvault:
        description: KeyVault Name
        type: choice
        options: 
        - mydtskeyvault
        - cschleiden
      
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          #allow-no-subscriptions: true

      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.56.0
          inlineScript: |
            az account list
            az account show
            appRegistration=$(az ad app list --display-name ${{ github.event.inputs.name }} --query "[0]")
            applicationId=$(echo "$appRegistration" | jq -r '.appId')
            echo $applicationId
            if [ ${{ github.event.inputs.append }} == 'true' ]; then
              secret=$(az ad app credential reset --append --id "$applicationId" --years "2" --query "password" -o tsv --display-name ${{ github.event.inputs.name }})
            else
              secret=$(az ad app credential reset --id "$applicationId" --years "2" --query "password" -o tsv --display-name ${{ github.event.inputs.name }})
            fi
            #if [ ${{ github.event.inputs.keyvault }} == 'true' ]; then
            echo "Updating Keyvault"
            az keyvault secret set --name "appreg-${{ github.event.inputs.name }}" --vault-name "${{ github.event.inputs.keyvault }}" --value "$secret" 
              if [ $? -ne 0 ]; then  
                    echo "Error: Failed to update the secret in Azure KeyVault. Please check the KeyVault name and permissions." 
                    echo "Please manually add to KeyVault" 
                    return 1  
              fi
            fi
            exit 0
            #echo "${{ github.event.inputs.message }} ${{ fromJSON('["", "ðŸ¥³"]')[github.event.inputs.use-emoji == 'true'] }} ${{ github.event.inputs.name }}"
